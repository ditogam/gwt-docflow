# The webRoot directory:
# the directory that the servlet engine regards as the place where applications 
# that use the servlet engine should be installed.  Generally, it is safe to leave
# this at the default setting of __AUTODETECT__.  When the SmartClient server is
# started, it logs a message to stdout telling you the autodetected path to your
# webRoot.  If this path is not your actual webRoot, then you'll want to override
# this config parameter here.
#
# Valid values: 
#
# 1. Absolute path to the webRoot directory
#
# 2. Special token:  __AUTODETECT__
#    When this token is used, SmartClient attempts to auto-detect the webRoot using
#    standard servlet APIs.  This may or may not work - depending on your
#    container type and deployment type.  For example, WAR/EAR deployments
#    on some containers never make it to disk, and so the container refuses
#    to provide the webRoot path.
#  
#    If SmartClient cannnot detect the webRoot, it sets the webRoot to
#    __USE_CONTAINER__ (see below).
#
# 3.  Special token: __USE_CONTAINER__
#     When this token is used, SmartClient uses standard servet APIs for accessing
#     filesystem resources.  This is slower than direct file access and, since
#     the servlet APIs provide no mechanism for writing to disk, means that some
#     development tools like the FileAssembler will not work.
#
webRoot: __AUTODETECT__

# if you've moved the isomorphic directory from its default location in webRoot,
# set the root-relative path to it here
#
# For example, if in your deployment the 'isomorphic' dir is in /foo/bar, then set
# then you'll need to set this to foo/bar/isomorphic
gwtModuleName: workflow
isomorphicPathRootRelative: $gwtModuleName/sc
# administration app
apps.adminConsole.location: $isomorphicPathRootRelative/tools
ui.adminConsole.location: $isomorphicPathRootRelative/tools


jpa.emfProvider: com.isomorphic.jpa.EMFProviderLMT

# Settings for LMT type

# Name of the datasource
jpa.persistenceUnitName: ds



sql.defaultDatabase: WF
# These are the settings for use with the PostgreSQL database.

# hostname and port where the database server is installed
sql.WF.driver.serverName: localhost
sql.WF.driver.portNumber: 5432

# name of the database to use
sql.WF.driver.databaseName: workflow

# username and password that can create and modify tables in that database
# this user must have the following privileges for the system to function
# properly: create/alter/drop table; create/drop sequences;
# insert/update/replace/delete rows.
sql.WF.driver.user: postgres

sql.WF.database.type: postgresql
sql.WF.autoJoinTransactions: false
sql.WF.driver.networkProtocol: tcp
sql.WF.interface.credentialsInURL: true
sql.WF.interface.type: driverManager
sql.WF.driver.driverType: thin
sql.WF.driver: org.postgresql.Driver
sql.WF.driver.driverName: postgresql
sql.WF.driver.password: 1


# Resource references for CMT type

# EntityManager resource reference name declared in /WEB-INF/web.xml.
# Example declaration:
# <persistence-context-ref>
#     <persistence-context-ref-name>persistence/em</persistence-context-ref-name>
#     <persistence-unit-name>PERSISTENCE_UNIT_NAME</persistence-unit-name>
# </persistence-context-ref>
jpa.cmt.entityManager: persistence/em

# Transaction resource reference name declared in /WEB-INF/web.xml.
# Example declaration:
# <resource-env-ref>
#     <resource-env-ref-name>persistence/tx</resource-env-ref-name>
#     <resource-env-ref-type>javax.transaction.UserTransaction</resource-env-ref-type>
# </resource-env-ref>
jpa.cmt.transaction: persistence/tx


# -------------- LOADING APP AND DATASOURCE DEFINITIONS --------------------

# Where the system looks for DataSource definition files ([dataSourceId].ds.xml or
# [dataSourceID].ds.js).  It's useful to put all your DataSources in one 
# directory since DataSources are frequently shared between applications.  
# "project.datasources" is also where the DataSource Importer tool looks 
# for available DataSources.
project.datasources: $webRoot/ds
project.ui: $webRoot/shared/ui
project.apps: $webRoot/shared/app
RPCManager.enableBuiltinRPCs: true
RPCManager.enabledBuiltInMethods: *
FilesystemDataSource.enabled:true